version: "3"
services:

  # TODO [evol] Allocate port 80 to Varnish by default if enabled ?
  # In this case, VARNISH_BACKEND_PORT would need to be switched to 6081.
  # See https://github.com/wodby/varnish
  # varnish:
  #   image: wodby/varnish:$VARNISH_TAG
  #   container_name: "${DC_NS}_varnish"
  #   restart: on-failure:5
  #   depends_on:
  #     - nginx
  #   environment:
  #     VARNISH_SECRET: secret
  #     VARNISH_BACKEND_HOST: nginx
  #     VARNISH_BACKEND_PORT: 80
  #     VARNISH_CONFIG_PRESET: drupal
  #     VARNISH_ALLOW_UNRESTRICTED_PURGE: 1

  # TODO [evol] Allocate port 6081 to Nginx by default if Varnish is enabled ?
  # See https://github.com/wodby/nginx
  nginx:
    image: wodby/nginx:$NGINX_TAG
    container_name: "${DC_NS}_nginx"
    restart: on-failure:5
    depends_on:
      - php
    environment:
      NGINX_STATIC_OPEN_FILE_CACHE: "off"
      NGINX_ERROR_LOG_LEVEL: debug
      NGINX_BACKEND_HOST: php
      NGINX_VHOST_PRESET: $NGINX_VHOST_PRESET
      NGINX_STATIC_404_TRY_INDEX: 1
      NGINX_SERVER_ROOT: $SERVER_DOCROOT_C
      NGINX_CLIENT_MAX_BODY_SIZE: 144M
    volumes:
      - ./$APP_DOCROOT:$APP_DOCROOT_C

  # See https://github.com/wodby/mariadb
  mariadb:
    image: wodby/mariadb:$MARIADB_TAG
    container_name: "${DC_NS}_mariadb"
    restart: on-failure:5
    stop_grace_period: 30s
    environment:
      MYSQL_ROOT_PASSWORD: $DB_ADMIN_PASS
      MYSQL_DATABASE: $DB_NAME
      MYSQL_USER: $DB_USER
      MYSQL_PASSWORD: $DB_PASS
    volumes:
      - mariadb_volume:/var/lib/mysql

  # See https://github.com/wodby/postgres/
  # postgres:
  #   image: wodby/postgres:$POSTGRES_TAG
  #   container_name: "${DC_NS}_postgres"
  #   restart: on-failure:5
  #   stop_grace_period: 30s
  #   environment:
  #     POSTGRES_DB: $DB_NAME
  #     POSTGRES_USER: $DB_USER
  #     POSTGRES_PASSWORD: $DB_PASSWORD
  #     PGPASSWORD: $DB_PASSWORD
  #   volumes:
  #     - postgres_volume:/var/lib/postgresql/data

  # See https://github.com/wodby/php
  # See https://github.com/wodby/drupal-php
  php:
    image: wodby/drupal-php:$PHP_TAG
    container_name: "${DC_NS}_php"
    restart: on-failure:5
    depends_on:
      - "mariadb"
    environment:
      DB_HOST: $DB_HOST
      DB_DRIVER: $DB_DRIVER
      DB_NAME: $DB_NAME
      DB_USER: $DB_USER
      DB_PASSWORD: $DB_PASS
      PHP_UPLOAD_MAX_FILESIZE: 128M
      PHP_POST_MAX_SIZE: 144M
      COLUMNS: 80
      # Custom PHP env vars - example use from Php scripts :
      # <?php $host_type = getenv('HOST_TYPE');
      HOST_TYPE: $HOST_TYPE
      INSTANCE_TYPE: $INSTANCE_TYPE
      INSTANCE_DOMAIN: $INSTANCE_DOMAIN
    volumes:
      - ./$APP_DOCROOT:$APP_DOCROOT_C
      - $DRUPAL_TMP_DIR:$DRUPAL_TMP_DIR_C
      - $DRUPAL_PRIVATE_DIR:$DRUPAL_PRIVATE_DIR_C

  crond:
    image: wodby/drupal-php:$PHP_TAG
    container_name: "${DC_NS}_crond"
    restart: on-failure:5
    environment:
      CRONTAB: "${DWT_CRON_FREQ} drush -r ${APP_DOCROOT_C} cron"
      DB_HOST: $DB_HOST
      DB_DRIVER: $DB_DRIVER
      DB_NAME: $DB_NAME
      DB_USER: $DB_USER
      DB_PASSWORD: $DB_PASS
      COLUMNS: 80
      # Custom PHP env vars - example use from Php scripts :
      # <?php $host_type = getenv('HOST_TYPE');
      HOST_TYPE: $HOST_TYPE
      INSTANCE_TYPE: $INSTANCE_TYPE
      INSTANCE_DOMAIN: $INSTANCE_DOMAIN
    command: sudo -E LD_PRELOAD=/usr/lib/preloadable_libiconv.so crond -f -d 0
    volumes:
      - ./$APP_DOCROOT:$APP_DOCROOT_C
      - $DRUPAL_TMP_DIR:$DRUPAL_TMP_DIR_C
      - $DRUPAL_PRIVATE_DIR:$DRUPAL_PRIVATE_DIR_C

  # See https://github.com/wodby/redis
  redis:
    image: wodby/redis:$REDIS_TAG
    container_name: "${DC_NS}_redis"
    restart: on-failure:5

  # See https://github.com/wodby/solr
  # solr:
  #   image: wodby/solr:$SOLR_TAG
  #   container_name: "${DC_NS}_solr"
  #   restart: on-failure:5
  #   environment:
  #     SOLR_DEFAULT_CONFIG_SET: $SOLR_CONFIG_SET
  #     SOLR_HEAP: 1024m

  # See https://github.com/apache/tika-docker
  # tika:
  #   image: apache/tika:$TIKA_TAG
  #   container_name: "${DC_NS}_tika"
  #   restart: on-failure:5

volumes:
  mariadb_volume:
  # postgres_volume:
